{"version":3,"sources":["components/layout/Header.js","components/layout/Footer.js","components/layout/Tree.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","Footer","useTreeItemStyles","palette","text","secondary","backgroundColor","grey","content","borderTopRightRadius","borderBottomRightRadius","paddingRight","fontWeight","typography","fontWeightMedium","fontWeightRegular","group","marginLeft","paddingLeft","expanded","label","labelRoot","display","alignItems","padding","labelIcon","labelText","StyledTreeItem","props","LabelIcon","labelInfo","bgColor","other","TreeItem","style","height","maxWidth","GmailTreeView","TreeView","defaultExpanded","defaultCollapseIcon","defaultExpandIcon","defaultEndIcon","width","nodeId","MailIcon","DeleteIcon","Label","SupervisorAccountIcon","InfoIcon","ForumIcon","LocalOfferIcon","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4a442a2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }));\r\n\r\nfunction Header() {\r\n    const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            News\r\n          </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n\r\n\r\n  \r\n  \r\n","import React from 'react';\r\n\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div>\r\n      Footer\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Label from '@material-ui/icons/Label';\r\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport ForumIcon from '@material-ui/icons/Forum';\r\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\r\n\r\nconst useTreeItemStyles = makeStyles(theme => ({\r\n  root: {\r\n    color: theme.palette.text.secondary,\r\n    '&:focus > $content': {\r\n      backgroundColor: `var(--tree-view-bg-color, ${theme.palette.grey[400]})`,\r\n      color: 'var(--tree-view-color)',\r\n    },\r\n  },\r\n  content: {\r\n    color: theme.palette.text.secondary,\r\n    borderTopRightRadius: theme.spacing(2),\r\n    borderBottomRightRadius: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n    fontWeight: theme.typography.fontWeightMedium,\r\n    '$expanded > &': {\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n  },\r\n  group: {\r\n    marginLeft: 0,\r\n    '& $content': {\r\n      paddingLeft: theme.spacing(2),\r\n    },\r\n  },\r\n  expanded: {},\r\n  label: {\r\n    fontWeight: 'inherit',\r\n    color: 'inherit',\r\n  },\r\n  labelRoot: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0.5, 0),\r\n  },\r\n  labelIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  labelText: {\r\n    fontWeight: 'inherit',\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nfunction StyledTreeItem(props) {\r\n  const classes = useTreeItemStyles();\r\n  const { labelText, labelIcon: LabelIcon, labelInfo, color, bgColor, ...other } = props;\r\n\r\n  return (\r\n    <TreeItem\r\n      label={\r\n        <div className={classes.labelRoot}>\r\n          <LabelIcon color=\"inherit\" className={classes.labelIcon} />\r\n          <Typography variant=\"body2\" className={classes.labelText}>\r\n            {labelText}\r\n          </Typography>\r\n          <Typography variant=\"caption\" color=\"inherit\">\r\n            {labelInfo}\r\n          </Typography>\r\n        </div>\r\n      }\r\n      style={{\r\n        '--tree-view-color': color,\r\n        '--tree-view-bg-color': bgColor,\r\n      }}\r\n      classes={{\r\n        root: classes.root,\r\n        content: classes.content,\r\n        expanded: classes.expanded,\r\n        group: classes.group,\r\n        label: classes.label,\r\n      }}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nStyledTreeItem.propTypes = {\r\n  bgColor: PropTypes.string,\r\n  color: PropTypes.string,\r\n  labelIcon: PropTypes.elementType.isRequired,\r\n  labelInfo: PropTypes.string,\r\n  labelText: PropTypes.string.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    height: 264,\r\n    flexGrow: 1,\r\n    maxWidth: 400,\r\n  },\r\n});\r\n\r\nexport default function GmailTreeView() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <TreeView\r\n      className={classes.root}\r\n      defaultExpanded={['3']}\r\n      defaultCollapseIcon={<ArrowDropDownIcon />}\r\n      defaultExpandIcon={<ArrowRightIcon />}\r\n      defaultEndIcon={<div style={{ width: 24 }} />}\r\n    >\r\n      <StyledTreeItem nodeId=\"1\" labelText=\"All Mail\" labelIcon={MailIcon} />\r\n      <StyledTreeItem nodeId=\"2\" labelText=\"Trash\" labelIcon={DeleteIcon} />\r\n      <StyledTreeItem nodeId=\"3\" labelText=\"Categories\" labelIcon={Label}>\r\n        <StyledTreeItem\r\n          nodeId=\"5\"\r\n          labelText=\"Social\"\r\n          labelIcon={SupervisorAccountIcon}\r\n          labelInfo=\"90\"\r\n          color=\"#1a73e8\"\r\n          bgColor=\"#e8f0fe\"\r\n        />\r\n        <StyledTreeItem\r\n          nodeId=\"6\"\r\n          labelText=\"Updates\"\r\n          labelIcon={InfoIcon}\r\n          labelInfo=\"2,294\"\r\n          color=\"#e3742f\"\r\n          bgColor=\"#fcefe3\"\r\n        />\r\n        <StyledTreeItem\r\n          nodeId=\"7\"\r\n          labelText=\"Forums\"\r\n          labelIcon={ForumIcon}\r\n          labelInfo=\"3,566\"\r\n          color=\"#a250f5\"\r\n          bgColor=\"#f3e8fd\"\r\n        />\r\n        <StyledTreeItem\r\n          nodeId=\"8\"\r\n          labelText=\"Promotions\"\r\n          labelIcon={LocalOfferIcon}\r\n          labelInfo=\"733\"\r\n          color=\"#3c8039\"\r\n          bgColor=\"#e6f4ea\"\r\n        />\r\n      </StyledTreeItem>\r\n      <StyledTreeItem nodeId=\"4\" labelText=\"History\" labelIcon={Label} />\r\n    </TreeView>\r\n  );\r\n}\r\n","import React from 'react';\nimport Header from './components/layout/Header';\nimport Footer from './components/layout/Footer';\nimport StyledTreeItem from './components/layout/Tree';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <StyledTreeItem />\n        Material UI\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}